1. Login.

3. Sancionar usuario.

4. Dar de alta usuario.


Con
    Javadoc
        @autor identifica el nombre del autor o autora de la clase
        @version, la identificación de la versión y fecha.
        @param: seguido del nombre, se usa para indicar cada uno de los parámetros que tienen el
        constructor o método.
        @return: si el método no es void, se indica lo que devuelve.
        @exception: se indica el nombre de la excepción, especificando cuales pueden lanzarse.
        @throws: se indica el nombre de la excepción, especificando las excepciones que pueden
        lanzarse.

        Por obligación (javadoc):
        al principio de cada clase
        al principio de cada método
        ante cada variable de clase
        Por conveniencia (una línea):

        al principio de fragmento de código no evidente
        a lo largo de los bucles

    Refactorizacion
    Solid
    Singletone
    Repositori




Cosas ya hechas
    El modelo vista controlador, esta empezado de momento, asi sirve
    FileManager, ya tiene un Repository, es singleton y cumple solid y su javaDoc

falta rehacer las llamadas usando singleton

    Se ha empezado a rehacer el mostrar calendario, dividiendolo en ficheros java pequeños
        CrearCalendario.java
        MostrarCalendario.java
                      if (semanaActs.get(actividad).get(numSemana).getDias().get(j).getHora().get(i).getCliente().get(i).getNombre().equals("Reservado")) {
                                    System.out.print(colorize(semanaActs.get(actividad).get(numSemana).getDias().get(j).getHora().get(i).getCliente().get(i).getNombre(), RED_BACK()));
                                }

                                if (semanaActs.get(actividad).get(numSemana).getDias().get(j).getHora().get(i).getCliente().get(i).getNombre().equals("Disponible")) {
                                    System.out.print(colorize(semanaActs.get(actividad).get(numSemana).getDias().get(j).getHora().get(i).getCliente().get(i <<<aqui>>>).getNombre(), GREEN_BACK(), BLACK_TEXT()));
                                }


            Estas linias han dado problemas y se han tenido que modificar
        VerCalendario.java



    Como se ha tocado el filemanager todas las llamadas a este java estaban fallanado
        entonces se han tenido que arregalar antes de poder verificar lo de calendario


    Ya se ha arreglado todas la llamadas a filemanager, ademas, se ha provocado el error de fichero vacio
        Error al leer el archivo. controller.Usuario
        Exception in thread "main" java.lang.NullPointerException: Cannot invoke "java.util.ArrayList.iterator()" because "usus1" is null
            at util.Menus.inicioSesionUsuarios(Menus.java:81)
            at controller.ParaUsuarios.appMovil(ParaUsuarios.java:26)
            at view.ViewPolideportivoTerminal.manejarMenuInicial(LauncherTerminal.java:47)
            at view.ViewPolideportivoTerminal.lanzador(LauncherTerminal.java:26)
            at Main.main(Main.java:11)



             // Comprobamos si hay usuarios registrados
                if (!Menus.inicioSesionUsuarios(sc)) {
                    System.out.println(colorize("No hay usuarios registrados.", BLUE_TEXT()));
                    return; // Salimos del método si no hay usuarios registrados
                }

                // Continuamos con el inicio de sesión
                while (!Menus.inicioSesionUsuarios(sc)) {
                    System.out.println(colorize("Inicio de sesión incorrecto", BLUE_TEXT()));
                }

             con este fragmento de codigo, parece que se ha solucionado los errores de codigo



Se comienza ha hacer un main personalizado para lo que se supone que nuestro codigo debe de hacer





Se hacen los singelton, se hacen lo jaavaha doc
se hacen los metodo de leer y duardar usuarios /(funcionan mal )






